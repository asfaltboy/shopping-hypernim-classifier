from trello import TrelloBase as TrelloBase
from typing import Any, Optional

class Card(TrelloBase):
    @property
    def short_url(self): ...
    @property
    def member_id(self): ...
    @property
    def short_id(self): ...
    @property
    def list_id(self): ...
    @property
    def board_id(self): ...
    @property
    def description(self): ...
    @property
    def date_last_activity(self): ...
    @property
    def labels(self): ...
    customFields: Any = ...
    @property
    def custom_fields(self): ...
    @property
    def comments(self): ...
    @property
    def checklists(self): ...
    @property
    def plugin_data(self): ...
    @property
    def attachments(self): ...
    trello_list: Any = ...
    board: Any = ...
    client: Any = ...
    id: Any = ...
    name: str = ...
    def __init__(self, parent: Any, card_id: Any, name: str = ...) -> None: ...
    @classmethod
    def from_json(cls, parent: Any, json_obj: Any): ...
    desc: Any = ...
    closed: Any = ...
    url: Any = ...
    shortUrl: Any = ...
    idMembers: Any = ...
    idShort: Any = ...
    idList: Any = ...
    idBoard: Any = ...
    idLabels: Any = ...
    badges: Any = ...
    pos: Any = ...
    due: Any = ...
    checked: Any = ...
    dateLastActivity: Any = ...
    def fetch(self, eager: bool = ...) -> None: ...
    def fetch_custom_fields(self, json_obj: Optional[Any] = ...): ...
    def fetch_comments(self, force: bool = ..., limit: Optional[Any] = ...): ...
    def get_list(self): ...
    def get_comments(self): ...
    def fetch_checklists(self): ...
    def fetch_plugin_data(self): ...
    def fetch_attachments(self, force: bool = ...): ...
    def get_attachments(self): ...
    actions: Any = ...
    def fetch_actions(
        self,
        action_filter: str = ...,
        since: Optional[Any] = ...,
        before: Optional[Any] = ...,
        action_limit: int = ...,
    ): ...
    def attriExp(self, multiple: Any): ...
    def listCardMove_date(self): ...
    def list_movements(
        self,
        list_cmp: Optional[Any] = ...,
        filter_by_date_interval: Optional[Any] = ...,
    ): ...
    def get_stats_by_list(
        self,
        lists: Any,
        list_cmp: Optional[Any] = ...,
        done_list: Optional[Any] = ...,
        time_unit: str = ...,
        card_movements_filter: Optional[Any] = ...,
    ): ...
    @property
    def latestCardMove_date(self): ...
    creation_date: Any = ...
    @property
    def created_date(self): ...
    @property
    def card_created_date(self): ...
    @property
    def due_date(self): ...
    def set_name(self, new_name: Any) -> None: ...
    def set_description(self, description: Any) -> None: ...
    def set_due(self, due: Any) -> None: ...
    def set_due_complete(self) -> None: ...
    def remove_due_complete(self) -> None: ...
    def remove_due(self) -> None: ...
    def set_pos(self, pos: Any) -> None: ...
    def set_custom_field(self, value: Any, custom_field: Any) -> None: ...
    def set_closed(self, closed: Any) -> None: ...
    def delete_comment(self, comment: Any) -> None: ...
    def delete(self) -> None: ...
    def assign(self, member_id: Any) -> None: ...
    def unassign(self, member_id: Any) -> None: ...
    def subscribe(self) -> None: ...
    def comment(self, comment_text: Any): ...
    def update_comment(self, comment_id: Any, comment_text: Any): ...
    def add_label(self, label: Any) -> None: ...
    def create_label(self, name: Any, color: Any) -> None: ...
    def remove_label(self, label: Any) -> None: ...
    def add_member(self, member: Any) -> None: ...
    def remove_member(self, member: Any) -> None: ...
    def attach(
        self,
        name: Optional[Any] = ...,
        mimeType: Optional[Any] = ...,
        file: Optional[Any] = ...,
        url: Optional[Any] = ...,
    ): ...
    def remove_attachment(self, attachment_id: Any) -> None: ...
    def change_pos(self, position: Any) -> None: ...
    def change_list(self, list_id: Any) -> None: ...
    def change_board(
        self, board_id: Any, list_id: Optional[Any] = ...
    ) -> None: ...
    def add_checklist(
        self, title: Any, items: Any, itemstates: Optional[Any] = ...
    ): ...
    def get_custom_field_by_name(self, cf_name: Any): ...
