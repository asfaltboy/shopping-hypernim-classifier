from typing import Any, Optional

class TrelloClient:
    oauth: Any = ...
    proxies: Any = ...
    public_only: Any = ...
    api_key: Any = ...
    api_secret: Any = ...
    resource_owner_key: Any = ...
    resource_owner_secret: Any = ...
    http_service: Any = ...
    def __init__(
        self,
        api_key: Any,
        api_secret: Optional[Any] = ...,
        token: Optional[Any] = ...,
        token_secret: Optional[Any] = ...,
        http_service: Any = ...,
        proxies: Any = ...,
    ) -> None: ...
    all_info: Any = ...
    def info_for_all_boards(self, actions: Any) -> None: ...
    def logout(self) -> None: ...
    def list_boards(self, board_filter: str = ...): ...
    def list_organizations(self): ...
    def get_organization(self, organization_id: Any): ...
    def get_board(self, board_id: Any): ...
    def add_board(
        self,
        board_name: Any,
        source_board: Optional[Any] = ...,
        organization_id: Optional[Any] = ...,
        permission_level: str = ...,
        default_lists: bool = ...,
    ): ...
    def get_member(self, member_id: Any): ...
    def get_card(self, card_id: Any): ...
    def get_list(self, list_id: Any): ...
    def get_label(self, label_id: Any, board_id: Any): ...
    def fetch_json(
        self,
        uri_path: Any,
        http_method: str = ...,
        headers: Optional[Any] = ...,
        query_params: Optional[Any] = ...,
        post_args: Optional[Any] = ...,
        files: Optional[Any] = ...,
    ): ...
    def list_hooks(self, token: Optional[Any] = ...): ...
    def create_hook(
        self,
        callback_url: Any,
        id_model: Any,
        desc: Optional[Any] = ...,
        token: Optional[Any] = ...,
    ): ...
    def search(
        self,
        query: Any,
        partial_match: bool = ...,
        models: Any = ...,
        board_ids: Any = ...,
        org_ids: Any = ...,
        card_ids: Any = ...,
        cards_limit: int = ...,
    ): ...
    def list_stars(self): ...
    def add_star(self, board_id: Any, position: str = ...): ...
    def delete_star(self, star: Any): ...
